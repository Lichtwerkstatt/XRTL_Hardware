#include <Arduino.h>
#include <AccelStepper.h>
#include <ArduinoJson.h>
#include <WebSocketsClient.h>
#include <SocketIOclient.h>
#include <ESP8266WiFi.h>

SocketIOclient socketIO;

// identify component
String componentID = "ID25_1";
bool busyState = false;
bool wasRunning = false;

// definition for stepper motors
const int stepperOneA = 4;
const int stepperOneB = 15;
const int stepperOneC = 5;
const int stepperOneD = 16;
const int stepsPerRevolution = 2048;
String stepperOneName = "iris";
AccelStepper stepperOne(AccelStepper::HALF4WIRE, stepperOneA, stepperOneB, stepperOneC, stepperOneD);

void socketIOEvent(socketIOmessageType_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case sIOtype_DISCONNECT:
      Serial.printf("[IOc] Disconnected!\n");
      break;
    case sIOtype_CONNECT:
      Serial.printf("[IOc] Connected to URL: %s\n", payload);

      // join default namespace
      socketIO.send(sIOtype_CONNECT, "/");
      break;
    case sIOtype_EVENT: {
      char * sptr = NULL;
      int id = strtol((char *)payload, &sptr, 10);
      Serial.printf("[IOc] get event: %s     (id: %d)\n", payload, id);
      DynamicJsonDocument incomingEvent(1024);
      DeserializationError error = deserializeJson(incomingEvent,payload,length);
      if(error) {
        Serial.printf("deserializeJson() failed: ");
        Serial.println(error.c_str());
        return;
      }

      String eventName = incomingEvent[0];
      Serial.printf("[IOc] event name: %s\n", eventName.c_str());

      if (eventName == "control") {
        // analyze and store input
        JsonObject receivedPayload = incomingEvent[1];
        String component = receivedPayload["component"];

        // act only when involving this component
        if (component == componentID) {
          // check for simple or extended command structure
          if (receivedPayload["command"].is<JsonObject>()) {
            JsonObject command = receivedPayload["command"];
            String control = receivedPayload["control"];
            int steps = command["steps"];
            driveStepper(control,steps);
          }
          else if (receivedPayload["command"].is<String>()) {
            String command = receivedPayload["command"];
            if (command == "getStatus") {
              reportState();
            }
            if (command == "restart") {
              Serial.println("Received restart command. Disconnecting now.");
              WiFi.disconnect();
              ESP.restart();
            }
          }
        }
      }
    }
    case sIOtype_ACK:
      Serial.printf("[IOc] get ack: %u\n", length);
      break;
    case sIOtype_ERROR:
      Serial.printf("[IOc] get error: %u\n", length);
      break;
    case sIOtype_BINARY_EVENT:
      Serial.printf("[IOc] get binary: %u\n", length);
      break;
    case sIOtype_BINARY_ACK:
      Serial.printf("[IOc] get binary ack: %u\n", length);
      break;
  }
}

void reportState() {
  DynamicJsonDocument outgoingEvent(1024);
  JsonArray payload = outgoingEvent.to<JsonArray>();
  payload.add("status");
  JsonObject parameters = payload.createNestedObject();
  parameters["component"] = componentID;
  JsonObject state = parameters.createNestedObject("status");
  state["busy"] = busyState;
  state[stepperOneName] = stepperOne.currentPosition();
  String output;
  serializeJson(payload, output);
  //socketIO.sendEVENT(output);
  Serial.print("string sent: ");
  Serial.println(output);
}

void driveStepper(String stepperName, int steps) {
  busyState = true;
  reportState();
  if (stepperName == stepperOneName) {
    Serial.printf("moving %s by %d steps... ", stepperOneName, steps);
    stepperOne.move(steps);
    wasRunning = true;
  }
}

void depowerStepper() {
  digitalWrite(stepperOneA,0);
  digitalWrite(stepperOneB,0);
  digitalWrite(stepperOneC,0);
  digitalWrite(stepperOneD,0);
}

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  stepperOne.setMaxSpeed(250);
  stepperOne.setAcceleration(250);

  // connect to WiFi
  WiFi.begin("Himbeere", "remotelab");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
  String ip = WiFi.localIP().toString();
  Serial.printf("[SETUP] Connected to WiFi as %s\n", ip.c_str());

  // connect to socketIO server: IP, port, URL
  socketIO.begin("192.168.4.1", 7000,"/socket.io/?EIO=4");

  // pass event handler
  socketIO.onEvent(socketIOEvent);
  
  // initialize iris as fully open:
  stepperOne.move(-stepsPerRevolution);
  while (stepperOne.isRunning()) {
    stepperOne.run();
    yield();
  }
  depowerStepper();
  stepperOne.setCurrentPosition(0);
  
  // setup complete, report state
  reportState();
}

void loop() {
  if (Serial.available() > 0) {
    String SerialInput=Serial.readStringUntil('\n');
    driveStepper("top",SerialInput.toInt());
  }
  if (stepperOne.isRunning()) {
    stepperOne.run();
  }
  else if (wasRunning){
    busyState = false;
    wasRunning = false;
    depowerStepper();
    Serial.printf("done. New Position: %d\n", stepperOne.currentPosition());
    reportState();
  }
}
